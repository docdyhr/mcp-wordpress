name: "ðŸ§ª Test & Coverage Badges"

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - 'jest.config*'
      - '.github/workflows/test-coverage-badges.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - 'jest.config*'
      - '.github/workflows/test-coverage-badges.yml'
  schedule:
    - cron: '15 6 * * *'
  workflow_dispatch:

jobs:
  update-metrics:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wordpress
          MYSQL_PASSWORD: wordpress
          MYSQL_ROOT_PASSWORD: rootpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root -prootpassword || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=15
      wordpress:
        image: wordpress:latest
        env:
          WORDPRESS_DB_HOST: 127.0.0.1:3306
          WORDPRESS_DB_USER: wordpress
          WORDPRESS_DB_PASSWORD: wordpress
          WORDPRESS_DB_NAME: wordpress
        ports:
          - 8081:80
        options: >-
          --health-cmd="curl --silent --fail http://localhost:80 || exit 1"
          --health-interval=15s --health-timeout=10s --health-retries=20
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - name: Install deps (with cache)
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            npm-${{ runner.os }}-
      - name: Install dependencies
        run: npm ci
      - name: Tests with coverage
        env:
          NODE_OPTIONS: --experimental-vm-modules
        run: NODE_OPTIONS="--experimental-vm-modules" npx jest --config=jest.typescript.config.json --coverage --testPathIgnorePatterns="tests/server/" --testPathIgnorePatterns="tests/contracts/"
      - name: Wait for WordPress health
        run: |
          echo "Waiting for WordPress to become healthy..."
          for i in {1..30}; do
            if curl -fsS http://localhost:8081 > /dev/null 2>&1; then
              echo "WordPress is up"; break; fi
            sleep 10
          done
          curl -fsS http://localhost:8081 > /dev/null || (echo "WordPress did not become ready"; exit 1)
      - name: Live compatibility tests
        env:
          WORDPRESS_TEST_URL: http://localhost:8081
          FORCE_LIVE_WP: 'true'
          NODE_OPTIONS: --experimental-vm-modules
        run: npm run test:compatibility
      - name: Extract metrics
        id: metrics
        run: |
          SUMMARY=$(grep -E "Tests:.*total" -R . | tail -1)
          TESTS_TOTAL=$(echo "$SUMMARY" | grep -oE '[0-9]+ total' | awk '{print $1}')
          TESTS_PASSED=$(echo "$SUMMARY" | grep -oE '[0-9]+ passed' | awk '{print $1}')
          [ -z "$TESTS_TOTAL" ] && TESTS_TOTAL=0
          [ -z "$TESTS_PASSED" ] && TESTS_PASSED=0
          if [ -f coverage/coverage-final.json ]; then
            node scripts/extract-coverage-metrics.js > coverage/raw-metrics.env
            . coverage/raw-metrics.env 2>/dev/null || true
            LINE_COV=${LINE_COV:-0}
            BRANCH_COV=${BRANCH_COV:-0}
            FUNC_COV=${FUNC_COV:-0}
          fi
          [ -z "$LINE_COV" ] && LINE_COV=0
          [ -z "$BRANCH_COV" ] && BRANCH_COV=0
          [ -z "$FUNC_COV" ] && FUNC_COV=0
          COLOR=red; INT=${LINE_COV%.*}
          if [ "$INT" -ge 90 ]; then COLOR=brightgreen; elif [ "$INT" -ge 75 ]; then COLOR=green; elif [ "$INT" -ge 50 ]; then COLOR=yellow; elif [ "$INT" -ge 30 ]; then COLOR=orange; fi
          BRANCH_COLOR=red; BINT=${BRANCH_COV%.*}
          if [ "$BINT" -ge 90 ]; then BRANCH_COLOR=brightgreen; elif [ "$BINT" -ge 75 ]; then BRANCH_COLOR=green; elif [ "$BINT" -ge 50 ]; then BRANCH_COLOR=yellow; elif [ "$BINT" -ge 30 ]; then BRANCH_COLOR=orange; fi
          FUNC_COLOR=red; FINT=${FUNC_COV%.*}
          if [ "$FINT" -ge 90 ]; then FUNC_COLOR=brightgreen; elif [ "$FINT" -ge 75 ]; then FUNC_COLOR=green; elif [ "$FINT" -ge 50 ]; then FUNC_COLOR=yellow; elif [ "$FINT" -ge 30 ]; then FUNC_COLOR=orange; fi
          TEST_COLOR=red
          if [ "$TESTS_TOTAL" -gt 0 ]; then
            PASS_PCT=$((100*TESTS_PASSED/TESTS_TOTAL))
            if [ "$PASS_PCT" -eq 100 ]; then TEST_COLOR=brightgreen; elif [ "$PASS_PCT" -ge 90 ]; then TEST_COLOR=green; elif [ "$PASS_PCT" -ge 75 ]; then TEST_COLOR=yellow; fi
          fi
          echo "tests_passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
          echo "tests_total=$TESTS_TOTAL" >> $GITHUB_OUTPUT
          echo "tests_color=$TEST_COLOR" >> $GITHUB_OUTPUT
          echo "coverage_lines=$LINE_COV" >> $GITHUB_OUTPUT
          echo "coverage_color=$COLOR" >> $GITHUB_OUTPUT
          echo "coverage_branches=$BRANCH_COV" >> $GITHUB_OUTPUT
          echo "coverage_branches_color=$BRANCH_COLOR" >> $GITHUB_OUTPUT
          echo "coverage_functions=$FUNC_COV" >> $GITHUB_OUTPUT
          echo "coverage_functions_color=$FUNC_COLOR" >> $GITHUB_OUTPUT
          echo '{"tests_passed":'"$TESTS_PASSED"',"tests_total":'"$TESTS_TOTAL"',"line_coverage":"'$LINE_COV'","branch_coverage":"'$BRANCH_COV'","function_coverage":"'$FUNC_COV'"}' > metrics.json
      - name: Coverage guardrail (blocking)
        env:
          COVERAGE_MIN_LINES: 30
          COVERAGE_MIN_BRANCHES: 5
          COVERAGE_MIN_FUNCTIONS: 5
        run: node scripts/coverage-guardrail.js
      - name: Upload metrics artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-metrics
          path: metrics.json
      - name: Append metrics history
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p metrics
          ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          echo "{\"timestamp\":\"$ts\",\"tests_passed\":${{ steps.metrics.outputs.tests_passed }},\"tests_total\":${{ steps.metrics.outputs.tests_total }},\"line_coverage\":\"${{ steps.metrics.outputs.coverage_lines }}\",\"branch_coverage\":\"${{ steps.metrics.outputs.coverage_branches }}\",\"function_coverage\":\"${{ steps.metrics.outputs.coverage_functions }}\"}" >> metrics/history.jsonl
          if git diff --quiet metrics/history.jsonl 2>/dev/null; then echo "No history change"; else git config user.email "action@github.com"; git config user.name "GitHub Action"; git add metrics/history.jsonl; git commit -m "chore: append metrics history $ts"; fi
      - name: PR Comment with Metrics
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `ðŸ§ª Test & Coverage Metrics\n\n- Tests: ${process.env.TESTS_PASSED}/${process.env.TESTS_TOTAL}\n- Lines: ${process.env.COVERAGE_LINES}%\n- Branches: ${process.env.COVERAGE_BRANCHES}%\n- Functions: ${process.env.COVERAGE_FUNCTIONS}%\n\n_Updated automatically._`;
            const { owner, repo } = context.repo;
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: context.issue.number,
              body
            });
        env:
          TESTS_PASSED: ${{ steps.metrics.outputs.tests_passed }}
          TESTS_TOTAL: ${{ steps.metrics.outputs.tests_total }}
          COVERAGE_LINES: ${{ steps.metrics.outputs.coverage_lines }}
          COVERAGE_BRANCHES: ${{ steps.metrics.outputs.coverage_branches }}
          COVERAGE_FUNCTIONS: ${{ steps.metrics.outputs.coverage_functions }}
      - name: Update README badges
        run: |
          sed -i "s|tests-[0-9]*%2F[0-9]*%20passing-[a-z]*|tests-${{ steps.metrics.outputs.tests_passed }}%2F${{ steps.metrics.outputs.tests_total }}%20passing-${{ steps.metrics.outputs.tests_color }}|g" README.md
          sed -i "s|lines%20coverage-[0-9]*\.?[0-9]*%25-[a-z]*|lines%20coverage-${{ steps.metrics.outputs.coverage_lines }}%25-${{ steps.metrics.outputs.coverage_color }}|g" README.md
          sed -i "s|branch%20coverage-[0-9]*\.?[0-9]*%25-[a-z]*|branch%20coverage-${{ steps.metrics.outputs.coverage_branches }}%25-${{ steps.metrics.outputs.coverage_branches_color }}|g" README.md
          sed -i "s|function%20coverage-[0-9]*\.?[0-9]*%25-[a-z]*|function%20coverage-${{ steps.metrics.outputs.coverage_functions }}%25-${{ steps.metrics.outputs.coverage_functions_color }}|g" README.md
          grep -q 'lines%20coverage-' README.md || echo "Adding line coverage badge placeholder" && echo "[![Line Coverage](https://img.shields.io/badge/lines%20coverage-${{ steps.metrics.outputs.coverage_lines }}%25-${{ steps.metrics.outputs.coverage_color }}?logo=jest&logoColor=white)](https://github.com/docdyhr/mcp-wordpress)" >> README.md
          grep -q 'branch%20coverage-' README.md || echo "[![Branch Coverage](https://img.shields.io/badge/branch%20coverage-${{ steps.metrics.outputs.coverage_branches }}%25-${{ steps.metrics.outputs.coverage_branches_color }}?logo=jest&logoColor=white)](https://github.com/docdyhr/mcp-wordpress)" >> README.md
          grep -q 'function%20coverage-' README.md || echo "[![Function Coverage](https://img.shields.io/badge/function%20coverage-${{ steps.metrics.outputs.coverage_functions }}%25-${{ steps.metrics.outputs.coverage_functions_color }}?logo=jest&logoColor=white)](https://github.com/docdyhr/mcp-wordpress)" >> README.md
      - name: Commit changes (if any)
        run: |
          if git diff --quiet README.md; then echo "No README badge updates"; exit 0; fi
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          git add README.md
          git commit -m "chore: update test & coverage badges (${{ steps.metrics.outputs.tests_passed }}/${{ steps.metrics.outputs.tests_total }} tests, ${{ steps.metrics.outputs.coverage_lines }}% lines)"
          git push
      - name: Summary
        run: |
          echo "Done: tests ${{ steps.metrics.outputs.tests_passed }}/${{ steps.metrics.outputs.tests_total }}, coverage ${{ steps.metrics.outputs.coverage_lines }}% (lines)" || true
