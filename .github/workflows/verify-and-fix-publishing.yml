name: 🔍 Verify & Auto-Fix Publishing Issues

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to verify (e.g., 2.9.2, 2.9.3)"
        required: true
        type: string
      auto_fix:
        description: "Automatically fix failed publications"
        required: false
        type: boolean
        default: true
  schedule:
    # Run daily at 3 AM UTC to check recent releases
    - cron: "0 3 * * *"

env:
  REGISTRY: docker.io
  IMAGE_NAME: docdyhr/mcp-wordpress

jobs:
  verify-publications:
    name: 🔍 Verify Publications
    runs-on: ubuntu-latest
    outputs:
      npm_status: ${{ steps.verify.outputs.npm_status }}
      docker_status: ${{ steps.verify.outputs.docker_status }}
      version: ${{ steps.verify.outputs.version }}
      needs_fix: ${{ steps.verify.outputs.needs_fix }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Determine Version to Check
        id: version
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Get latest release version for scheduled runs
            VERSION=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1 | sed 's/^v//')
          fi

          # Remove 'v' prefix if present
          VERSION=${VERSION#v}

          echo "Checking version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: 🔍 Verify NPM Publication
        id: verify-npm
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Checking NPM package: mcp-wordpress@$VERSION"

          # Check if version exists on NPM
          if npm view mcp-wordpress@$VERSION version > /dev/null 2>&1; then
            echo "✅ NPM package mcp-wordpress@$VERSION exists"
            echo "npm_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ NPM package mcp-wordpress@$VERSION not found"
            echo "npm_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Verify Docker Publication
        id: verify-docker
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
          echo "Checking Docker image: $IMAGE"

          # Try to get image manifest without authentication first
          if docker manifest inspect $IMAGE > /dev/null 2>&1; then
            echo "✅ Docker image $IMAGE exists"
            echo "docker_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Docker image $IMAGE not found"
            echo "docker_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: 📊 Generate Verification Report
        id: verify
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          NPM_STATUS="${{ steps.verify-npm.outputs.npm_status }}"
          DOCKER_STATUS="${{ steps.verify-docker.outputs.docker_status }}"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "npm_status=$NPM_STATUS" >> $GITHUB_OUTPUT
          echo "docker_status=$DOCKER_STATUS" >> $GITHUB_OUTPUT

          echo "## 📊 Publication Verification Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**NPM:** $([ "$NPM_STATUS" = "success" ] && echo "✅ Published" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Hub:** $([ "$DOCKER_STATUS" = "success" ] && echo "✅ Published" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine if fixes are needed
          if [[ "$DOCKER_STATUS" = "failure" ]]; then
            echo "needs_fix=true" >> $GITHUB_OUTPUT
            echo "🔧 **Action Required:** Docker publication needs fixing" >> $GITHUB_STEP_SUMMARY
          else
            echo "needs_fix=false" >> $GITHUB_OUTPUT
            echo "✅ **Status:** All publications verified successfully" >> $GITHUB_STEP_SUMMARY
          fi

  auto-fix-docker:
    name: 🔧 Auto-Fix Docker Publishing
    runs-on: ubuntu-latest
    needs: verify-publications
    if: |
      needs.verify-publications.outputs.needs_fix == 'true' &&
      (github.event.inputs.auto_fix == 'true' || github.event_name == 'schedule')
    steps:
      - name: 🚀 Trigger Docker Publishing Fix
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ needs.verify-publications.outputs.version }}';

            console.log(`Triggering Docker publishing fix for version ${version}`);

            try {
              const response = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'docker-publish-fix.yml',
                ref: 'main',
                inputs: {
                  version: version,
                  force_rebuild: 'true'
                }
              });

              console.log('✅ Docker publishing fix triggered successfully');
              console.log(`Workflow run: ${response.status}`);
            } catch (error) {
              console.error('❌ Failed to trigger Docker publishing fix:', error);
              throw error;
            }

      - name: ⏳ Wait for Fix Completion
        run: |
          echo "Waiting for Docker publishing fix to complete..."
          sleep 30

  create-or-close-issues:
    name: 📝 Manage Publishing Issues
    runs-on: ubuntu-latest
    needs: [verify-publications, auto-fix-docker]
    if: always() && needs.verify-publications.result == 'success'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Check for Existing Issues
        id: check-issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ needs.verify-publications.outputs.version }}';
            const dockerStatus = '${{ needs.verify-publications.outputs.docker_status }}';

            // Search for existing publishing issues for this version
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'publishing-failure',
              state: 'open'
            });

            const versionIssues = issues.data.filter(issue =>
              issue.title.includes(`v${version}`) || issue.title.includes(`${version}`)
            );

            console.log(`Found ${versionIssues.length} existing issues for version ${version}`);

            return {
              existingIssues: versionIssues.map(issue => ({ number: issue.number, title: issue.title })),
              dockerStatus: dockerStatus,
              version: version
            };

      - name: ✅ Close Resolved Issues
        if: needs.verify-publications.outputs.docker_status == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { existingIssues, version } = ${{ steps.check-issues.outputs.result }};

            for (const issue of existingIssues) {
              console.log(`Closing resolved issue #${issue.number}: ${issue.title}`);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: "## ✅ Publishing Issue Resolved\n\nThe Docker Hub publishing issue for version **v" + version + "** has been automatically resolved.\n\n### 📊 Verification Results\n- **NPM**: ✅ Published and verified\n- **Docker Hub**: ✅ Published and verified\n\n### 🔧 Resolution\nThe issue was automatically detected and fixed by the publishing verification workflow.\n\n**Verification Time**: " + new Date().toISOString() + "\n\n---\n*This issue was automatically resolved by the publishing verification workflow.*"
              });

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed',
                state_reason: 'completed'
              });
            }

      - name: 🚨 Create New Issue for Failures
        if: |
          needs.verify-publications.outputs.docker_status == 'failure' &&
          needs.auto-fix-docker.result != 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { existingIssues, version } = ${{ steps.check-issues.outputs.result }};

            // Don't create duplicate issues
            if (existingIssues.length > 0) {
              console.log(`Issue already exists for version ${version}, skipping creation`);
              return;
            }

            console.log(`Creating new publishing failure issue for version ${version}`);

            const issueBody = "## 🚨 Publishing Verification Failed\n\nThe automated verification check detected that version **v" + version + "** failed to publish to: **Docker Hub**\n\n### 📊 Verification Results\n\n| Target | Status | Details |\n|--------|--------|----------|\n| NPM | ✅ Success | [View on NPM](https://www.npmjs.com/package/mcp-wordpress/v/" + version + ") |\n| Docker Hub | ❌ Failed | Version not found |\n\n### 🔧 Auto-Fix Attempted\n\nAn automatic fix was attempted but failed. Manual intervention may be required.\n\n### 🔧 Manual Fix Options\n\n1. **Run the Docker publishing fix workflow:**\n   ```bash\n   gh workflow run docker-publish-fix.yml -f version=" + version + " -f force_rebuild=true\n   ```\n\n2. **Check repository secrets:**\n   - Verify `DOCKER_USERNAME` and `DOCKER_PASSWORD` are valid\n   - Ensure Docker Hub account has proper permissions\n\n3. **Manual Docker publishing:**\n   ```bash\n   docker build -t docdyhr/mcp-wordpress:" + version + " .\n   docker push docdyhr/mcp-wordpress:" + version + "\n   ```\n\n### 📝 Workflow Details\n\n- **Triggered by:** Automated verification\n- **Timestamp:** " + new Date().toISOString() + "\n- **Auto-fix Status:** Failed\n\n---\n\n*This issue was automatically created by the publishing verification workflow.*";

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "🚨 Publishing Verification Failed for v" + version,
              body: issueBody,
              labels: ['bug', 'publishing-failure', 'automated']
            });

  summary:
    name: 📊 Summary
    runs-on: ubuntu-latest
    needs: [verify-publications, auto-fix-docker, create-or-close-issues]
    if: always()
    steps:
      - name: 📊 Generate Final Summary
        run: |
          VERSION="${{ needs.verify-publications.outputs.version }}"
          NPM_STATUS="${{ needs.verify-publications.outputs.npm_status }}"
          DOCKER_STATUS="${{ needs.verify-publications.outputs.docker_status }}"
          AUTO_FIX_STATUS="${{ needs.auto-fix-docker.result }}"

          echo "## 🎯 Publishing Verification Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version Checked:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**NPM Status:** $([ "$NPM_STATUS" = "success" ] && echo "✅ Published" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Status:** $([ "$DOCKER_STATUS" = "success" ] && echo "✅ Published" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY

          if [[ "$AUTO_FIX_STATUS" != "skipped" ]]; then
            echo "**Auto-fix Status:** $([ "$AUTO_FIX_STATUS" = "success" ] && echo "✅ Completed" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "$NPM_STATUS" = "success" && "$DOCKER_STATUS" = "success" ]]; then
            echo "🎉 **Result:** All publications verified successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Result:** Some publications need attention" >> $GITHUB_STEP_SUMMARY
          fi
