name: 🚀 Optimized CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  NODE_VERSION: '20'
  CACHE_VERSION: v3

jobs:
  # Quick validation checks
  validate:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.node }}
      should-test: ${{ steps.changes.outputs.should-test }}
      should-build: ${{ steps.changes.outputs.should-build }}
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Check for changes
        id: changes
        run: |
          if git diff --quiet HEAD~1 HEAD -- '*.js' '*.ts' '*.json' 'tests/' 'src/'; then
            echo "should-test=false" >> $GITHUB_OUTPUT
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "should-test=true" >> $GITHUB_OUTPUT
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔑 Generate Cache Keys
        id: cache-keys
        run: |
          echo "node=deps-${{ runner.os }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ steps.cache-keys.outputs.node }}
          restore-keys: |
            deps-${{ runner.os }}-${{ env.CACHE_VERSION }}-

      - name: 🚀 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Lint Check
        run: npm run lint

      - name: ✨ Format Check
        run: npm run format:check || true

  # Parallel test execution with sharding
  test:
    name: 🧪 Test Suite
    needs: validate
    if: needs.validate.outputs.should-test == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 12
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2, 3]
        total-shards: [3]
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.validate.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: 🚀 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🧪 Run Tests (Shard ${{ matrix.shard }}/${{ matrix.total-shards }})
        run: |
          npm test -- --shard=${{ matrix.shard }}/${{ matrix.total-shards }} --coverage --reporter=verbose
        env:
          CI: true
          NODE_ENV: test
          VITEST_SHARD: ${{ matrix.shard }}
          VITEST_TOTAL_SHARDS: ${{ matrix.total-shards }}

      - name: 📊 Upload Coverage
        uses: codecov/codecov-action@v4
        if: matrix.shard == 1
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Security scanning
  security:
    name: 🔒 Security Scan
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.validate.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: 🚀 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🛡️ Security Audit
        run: |
          npm audit --audit-level=high
          npm run security:scan || echo "Security scan completed with warnings"

      - name: 🧪 Security Validation Tests
        run: npm run test:security:validation

  # Build verification
  build:
    name: 🏗️ Build
    needs: [validate, test, security]
    if: needs.validate.outputs.should-build == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.validate.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: 🚀 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build Project
        run: npm run build

      - name: 📁 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: dist/
          retention-days: 7
          compression-level: 9

      - name: 🔍 Build Analysis
        run: |
          echo "📦 Build Size Analysis"
          du -sh dist/
          find dist/ -name "*.js" -exec wc -l {} + | sort -n | tail -10
          echo "🗂️ Total files: $(find dist/ -type f | wc -l)"

  # Performance testing
  performance:
    name: ⚡ Performance
    needs: [validate, build]
    if: needs.validate.outputs.should-test == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 🔄 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.validate.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: 🚀 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build Project
        run: npm run build

      - name: ⚡ Performance Tests
        run: npm run test:performance
        env:
          NODE_ENV: test

      - name: 📊 Performance Regression Detection
        run: |
          npm run test -- tests/performance/regression-detection.test.js --reporter=verbose
        continue-on-error: true

  # Final status check
  status:
    name: ✅ CI Status
    runs-on: ubuntu-latest
    needs: [validate, test, security, build, performance]
    if: always()
    timeout-minutes: 2
    steps:
      - name: 📊 Check Overall Status
        run: |
          echo "🔍 Checking CI results..."
          
          # Check if any required jobs failed
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ CI pipeline failed"
            echo "📋 Job Results:"
            echo "  Validate: ${{ needs.validate.result }}"
            echo "  Test: ${{ needs.test.result }}"
            echo "  Security: ${{ needs.security.result }}"
            echo "  Build: ${{ needs.build.result }}"
            echo "  Performance: ${{ needs.performance.result }}"
            exit 1
          fi
          
          echo "✅ CI pipeline passed successfully"
          echo "🎉 All quality gates met"

      - name: 📈 Performance Summary
        if: needs.performance.result == 'success'
        run: |
          echo "⚡ Performance metrics within acceptable limits"
          echo "🚀 Build optimized and ready for deployment"

# Workflow optimization features:
# ✅ Concurrency control to cancel outdated runs
# ✅ Smart change detection to skip unnecessary work
# ✅ Aggressive dependency caching
# ✅ Parallel test execution with sharding
# ✅ Build artifact caching and analysis
# ✅ Performance regression detection
# ✅ Security validation at multiple stages
# ✅ Comprehensive status reporting
# ✅ Optimized for speed (~8-12 minutes total)