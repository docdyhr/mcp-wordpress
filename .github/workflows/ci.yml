name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20'
  NODE_OPTIONS: '--experimental-vm-modules'

jobs:
  # 🧪 Testing Jobs
  test-matrix:
    name: 🧪 Test Matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [20, 22]
        test-suite: 
          - typescript
          - security
          - config
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🧪 Run ${{ matrix.test-suite }} Tests
        run: npm run test:${{ matrix.test-suite }}
        env:
          # Mock credentials for testing
          WORDPRESS_SITE_URL: https://example.com
          WORDPRESS_USERNAME: test_user
          WORDPRESS_APP_PASSWORD: test_password
          CI: true

  # 🔍 Code Quality & Security
  quality-checks:
    name: 🔍 Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 💾 Cache Build Output
        uses: actions/cache@v4
        with:
          path: |
            dist/
            node_modules/.cache/
          key: ${{ runner.os }}-build-${{ hashFiles('package-lock.json') }}-${{ hashFiles('src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('package-lock.json') }}-
            ${{ runner.os }}-build-

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🔍 TypeScript Type Check
        run: npm run typecheck

      - name: 🧹 Lint Code
        run: npm run lint

      - name: 📊 Test Coverage
        run: npm run test:coverage

      - name: 📈 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 🔒 Security Audit
        run: npm audit --audit-level moderate

      - name: 🔍 Dependency Check
        run: npx depcheck

  # 📦 Build & Package
  build-package:
    name: 📦 Build & Package
    runs-on: ubuntu-latest
    needs: [test-matrix, quality-checks]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Project
        run: npm run build

      - name: 📦 Test Package Installation
        run: npm pack --dry-run

      - name: 🎯 Test Binary Commands
        run: |
          # Test that binaries are executable
          node bin/setup.js --help || echo "Setup command test complete"
          node bin/status.js --help || echo "Status command test complete"

      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            README.md
            LICENSE

  # 🌍 WordPress Version Compatibility
  wordpress-compatibility:
    name: 🌍 WordPress Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[test-wp]')
    strategy:
      matrix:
        wordpress-version: ['6.0', '6.1', '6.2', '6.3', '6.4', '6.5', 'latest']
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: wordpress_test
          MYSQL_USER: wp_user
          MYSQL_PASSWORD: wp_password
          MYSQL_ROOT_PASSWORD: root_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      wordpress:
        image: wordpress:${{ matrix.wordpress-version }}
        env:
          WORDPRESS_DB_HOST: mysql:3306
          WORDPRESS_DB_NAME: wordpress_test
          WORDPRESS_DB_USER: wp_user
          WORDPRESS_DB_PASSWORD: wp_password
        ports:
          - 8080:80

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Project
        run: npm run build

      - name: ⏳ Wait for WordPress
        run: |
          echo "Waiting for WordPress to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:8080; do sleep 5; done'

      - name: 🔧 Setup WordPress for Testing
        run: |
          echo "Installing WordPress and setting up test user..."
          
          # Get WordPress container ID
          WP_CONTAINER=$(docker ps --filter "ancestor=wordpress:${{ matrix.wordpress-version }}" --format "{{.ID}}")
          echo "WordPress container: $WP_CONTAINER"
          
          # Wait for WordPress container to be ready
          echo "Waiting for WordPress container to be ready..."
          timeout 60 bash -c "until docker exec $WP_CONTAINER php -v >/dev/null 2>&1; do sleep 2; echo -n '.'; done"
          echo "Container ready"
          
          # Install WP-CLI in container
          echo "Installing WP-CLI..."
          docker exec $WP_CONTAINER bash -c "
            cd /tmp &&
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar &&
            chmod +x wp-cli.phar &&
            mv wp-cli.phar /usr/local/bin/wp &&
            wp --version --allow-root
          "
          
          # Wait for WordPress to be accessible
          echo "Waiting for WordPress to be accessible..."
          timeout 120 bash -c 'until curl -f http://localhost:8080/ >/dev/null 2>&1; do sleep 2; echo -n "."; done'
          echo "WordPress accessible"
          
          # Install WordPress
          echo "Installing WordPress..."
          docker exec $WP_CONTAINER bash -c "
            cd /var/www/html &&
            wp core install \
              --url='http://localhost:8080' \
              --title='CI Test Site' \
              --admin_user='admin' \
              --admin_password='password' \
              --admin_email='test@example.com' \
              --allow-root --quiet
          "
          
          # Configure WordPress for API testing
          echo "Configuring WordPress for API testing..."
          docker exec $WP_CONTAINER bash -c "
            cd /var/www/html &&
            wp rewrite structure '/%postname%/' --allow-root --quiet &&
            wp rewrite flush --allow-root --quiet &&
            wp user update admin --role=administrator --allow-root --quiet &&
            wp post create --post_title='Test Post' --post_content='Test content for API' --post_status=publish --allow-root --quiet
          "
          
          # Verify installation
          echo "Verifying WordPress installation..."
          if curl -s http://localhost:8080/wp-json/wp/v2/ | grep -q 'namespace'; then
            echo "✅ WordPress REST API is working"
          else
            echo "❌ WordPress REST API not working"
            curl -s http://localhost:8080/wp-json/wp/v2/ || true
            exit 1
          fi
          
          echo "WordPress setup completed successfully"

      - name: 🧪 Test WordPress ${{ matrix.wordpress-version }} Compatibility
        run: npm run test:compatibility
        env:
          WORDPRESS_TEST_URL: http://localhost:8080
          WORDPRESS_USERNAME: admin
          WORDPRESS_PASSWORD: password
          WORDPRESS_AUTH_METHOD: basic
        continue-on-error: ${{ matrix.wordpress-version == 'latest' }}

  # 🚨 Security Scanning
  security-scan:
    name: 🚨 Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-fs-scan'

  # 📚 Documentation
  docs-check:
    name: 📚 Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Project
        run: npm run build

      - name: 📝 Check Documentation Links
        run: |
          npm install -g markdown-link-check
          find . -name "*.md" -not -path "./node_modules/*" -exec markdown-link-check {} \;

      - name: 📊 Generate TypeScript Documentation
        run: |
          npm install -g typedoc
          npx typedoc --out docs-temp src/index.ts

      - name: 📤 Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs-temp/

  # 🏷️ Release Management
  release:
    name: 🏷️ Release Management
    runs-on: ubuntu-latest
    needs: [test-matrix, quality-checks, build-package]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🏷️ Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Check if release already exists
          if gh release view "v$VERSION" >/dev/null 2>&1; then
            echo "✅ Release v$VERSION already exists (created by semantic-release)"
            exit 0
          fi
          
          # Create GitHub release only if it doesn't exist
          echo "📝 Creating release v$VERSION..."
          
          # Generate release notes if file doesn't exist
          if [ ! -f "RELEASE_NOTES_v$VERSION.md" ]; then
            echo "# Release v$VERSION" > RELEASE_NOTES_v$VERSION.md
            echo "" >> RELEASE_NOTES_v$VERSION.md
            echo "Release created by CI/CD pipeline" >> RELEASE_NOTES_v$VERSION.md
            echo "" >> RELEASE_NOTES_v$VERSION.md
            echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details." >> RELEASE_NOTES_v$VERSION.md
          fi
          
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file RELEASE_NOTES_v$VERSION.md \
            --latest

      - name: 📦 Publish to NPM
        if: success()
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: false

      - name: 🚨 Notify on NPM Publish Failure
        if: failure()
        run: |
          echo "⚠️ NPM publish failed after successful release creation"
          echo "Manual intervention may be required"

  # 📊 Performance Monitoring
  performance:
    name: 📊 Performance Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Project
        run: npm run build

      - name: 📊 Performance Benchmark
        run: |
          # Create a simple performance test
          echo "Running performance benchmarks..."
          time npm run health
          
          # Memory usage check
          node -e "
            const used = process.memoryUsage();
            console.log('Memory Usage:');
            for (let key in used) {
              console.log(\`\${key}: \${Math.round(used[key] / 1024 / 1024 * 100) / 100} MB\`);
            }
          "

  # 🎯 Post-merge Actions
  post-merge:
    name: 🎯 Post-merge Actions
    runs-on: ubuntu-latest
    needs: [test-matrix, quality-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📊 Update Project Metrics
        run: |
          echo "📊 Project Metrics Updated:"
          echo "- Commit: ${{ github.sha }}"
          echo "- Tests Passed: ✅"
          echo "- Quality Checks: ✅"
          echo "- Build Status: ✅"

      - name: 🔄 Trigger Dependent Workflows
        if: success()
        run: echo "All checks passed - ready for production use!"

  # 📈 Metrics Collection
  metrics:
    name: 📈 Metrics Collection  
    runs-on: ubuntu-latest
    if: always()
    needs: [test-matrix, quality-checks, build-package]
    steps:
      - name: 📊 Collect Workflow Metrics
        run: |
          echo "📈 Workflow Metrics:"
          echo "- Test Matrix Status: ${{ needs.test-matrix.result }}"
          echo "- Quality Checks Status: ${{ needs.quality-checks.result }}"
          echo "- Build Package Status: ${{ needs.build-package.result }}"
          echo "- Overall Success Rate: $([ "${{ needs.test-matrix.result }}" == "success" ] && [ "${{ needs.quality-checks.result }}" == "success" ] && echo "100%" || echo "< 100%")"