name: üîç Verify Release Publishing

on:
  workflow_run:
    workflows: ["üöÄ Release & Publish"]
    types: [completed]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to verify (e.g., 1.3.1)'
        required: false
        type: string

jobs:
  verify-publishing:
    name: üîç Verify NPM & Docker Publishing
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      npm-status: ${{ steps.npm-check.outputs.status }}
      docker-status: ${{ steps.docker-check.outputs.status }}
      overall-status: ${{ steps.report.outputs.overall_status }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci

      - name: üîç Get Version to Check
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ inputs.version }}" ]; then
            echo "version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          else
            # Get the latest version from package.json
            VERSION=$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi
          echo "Checking version: $(cat $GITHUB_OUTPUT | grep version)"

      - name: ‚è±Ô∏è Wait for Publishing Propagation
        if: github.event_name == 'workflow_run'
        run: |
          echo "Waiting 3 minutes for NPM and Docker Hub to propagate..."
          sleep 180

      - name: üì¶ Verify NPM Publishing
        id: npm-check
        continue-on-error: true
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Checking NPM for version $VERSION..."
          
          # Check if version exists on NPM
          if npm view mcp-wordpress@$VERSION version 2>/dev/null; then
            echo "‚úÖ Version $VERSION found on NPM"
            echo "status=success" >> $GITHUB_OUTPUT
            
            # Get publish time
            PUBLISH_TIME=$(npm view mcp-wordpress@$VERSION time 2>/dev/null || echo "Unknown")
            echo "publish_time=$PUBLISH_TIME" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Version $VERSION NOT found on NPM"
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: üê≥ Verify Docker Hub Publishing
        id: docker-check
        continue-on-error: true
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Checking Docker Hub for version $VERSION..."
          
          # Function to check Docker Hub with retry
          check_docker_hub() {
            local version=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts: Checking Docker Hub API..."
              
              # Check Docker Hub API with timeout
              RESPONSE=$(curl -s --max-time 30 https://hub.docker.com/v2/repositories/docdyhr/mcp-wordpress/tags || echo '{"results":[]}')
              
              # Check for both v-prefixed and non-prefixed versions
              if echo "$RESPONSE" | jq -e ".results[] | select(.name == \"$version\" or .name == \"v$version\")" > /dev/null 2>&1; then
                echo "‚úÖ Version $version found on Docker Hub"
                echo "status=success" >> $GITHUB_OUTPUT
                
                # Get last updated time
                LAST_UPDATED=$(echo "$RESPONSE" | jq -r ".results[] | select(.name == \"$version\" or .name == \"v$version\") | .last_updated" | head -1)
                echo "last_updated=$LAST_UPDATED" >> $GITHUB_OUTPUT
                return 0
              else
                echo "Version $version not found, attempt $attempt/$max_attempts"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Waiting 30 seconds before retry..."
                  sleep 30
                fi
              fi
              
              attempt=$((attempt + 1))
            done
            
            echo "‚ùå Version $version NOT found on Docker Hub after $max_attempts attempts"
            echo "status=failure" >> $GITHUB_OUTPUT
            return 1
          }
          
          check_docker_hub "$VERSION"

      - name: üìä Generate Verification Report
        id: report
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          NPM_STATUS="${{ steps.npm-check.outputs.status }}"
          DOCKER_STATUS="${{ steps.docker-check.outputs.status }}"
          
          # Create summary
          echo "## üîç Publishing Verification Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üì¶ NPM Publishing" >> $GITHUB_STEP_SUMMARY
          if [ "$NPM_STATUS" == "success" ]; then
            echo "‚úÖ **Status:** Published successfully" >> $GITHUB_STEP_SUMMARY
            echo "üìÖ **Published at:** ${{ steps.npm-check.outputs.publish_time }}" >> $GITHUB_STEP_SUMMARY
            echo "üîó **URL:** https://www.npmjs.com/package/mcp-wordpress/v/$VERSION" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** Not found" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è Version $VERSION was not found on NPM registry" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üê≥ Docker Hub Publishing" >> $GITHUB_STEP_SUMMARY
          if [ "$DOCKER_STATUS" == "success" ]; then
            echo "‚úÖ **Status:** Published successfully" >> $GITHUB_STEP_SUMMARY
            echo "üìÖ **Last updated:** ${{ steps.docker-check.outputs.last_updated }}" >> $GITHUB_STEP_SUMMARY
            echo "üîó **URL:** https://hub.docker.com/r/docdyhr/mcp-wordpress/tags?name=$VERSION" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Status:** Not found" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è Version $VERSION was not found on Docker Hub" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check overall status
          if [ "$NPM_STATUS" == "success" ] && [ "$DOCKER_STATUS" == "success" ]; then
            echo "‚úÖ **Overall Status:** All publishing targets verified successfully!" >> $GITHUB_STEP_SUMMARY
            echo "overall_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå **Overall Status:** Some publishing targets failed verification" >> $GITHUB_STEP_SUMMARY
            echo "overall_status=failure" >> $GITHUB_OUTPUT
          fi

      - name: üö® Create Issue on Failure
        if: steps.report.outputs.overall_status == 'failure' && github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const npmStatus = '${{ steps.npm-check.outputs.status }}';
            const dockerStatus = '${{ steps.docker-check.outputs.status }}';
            const workflowUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
            const issueTitle = `üö® Publishing Verification Failed for v${version}`;
            
            let failedTargets = [];
            if (npmStatus !== 'success') failedTargets.push('NPM');
            if (dockerStatus !== 'success') failedTargets.push('Docker Hub');
            
            const issueBody = `## üö® Publishing Verification Failed
            
            The automated verification check detected that version **v${version}** failed to publish to: **${failedTargets.join(', ')}**
            
            ### üìä Verification Results
            
            | Target | Status | Details |
            |--------|--------|---------|
            | NPM | ${npmStatus === 'success' ? '‚úÖ Success' : '‚ùå Failed'} | ${npmStatus === 'success' ? `[View on NPM](https://www.npmjs.com/package/mcp-wordpress/v/${version})` : 'Version not found'} |
            | Docker Hub | ${dockerStatus === 'success' ? '‚úÖ Success' : '‚ùå Failed'} | ${dockerStatus === 'success' ? `[View on Docker Hub](https://hub.docker.com/r/docdyhr/mcp-wordpress/tags?name=${version})` : 'Version not found'} |
            
            ### üîß Recommended Actions
            
            1. Check the [release workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/workflows/release.yml) for errors
            2. Manually verify credentials are still valid:
               - NPM_TOKEN in repository secrets
               - DOCKER_USERNAME and DOCKER_PASSWORD in repository secrets
            3. If needed, manually publish using:
               \`\`\`bash
               # For NPM
               npm publish
               
               # For Docker
               gh workflow run docker-publish.yml -f tag=v${version} -f push=true
               \`\`\`
            
            ### üìù Workflow Details
            
            - **Workflow Run:** [View verification workflow](${workflowUrl})
            - **Triggered by:** Release workflow completion
            - **Timestamp:** ${new Date().toISOString()}
            
            ---
            
            *This issue was automatically created by the publishing verification workflow.*`;
            
            // Check if similar issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'publishing-failure',
              state: 'open'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(version)
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['bug', 'publishing-failure', 'automated']
              });
              console.log('Issue created successfully');
            } else {
              console.log(`Issue already exists for version ${version}: #${existingIssue.number}`);
            }

      - name: üìà Post Success Metrics
        if: steps.report.outputs.overall_status == 'success'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "üéâ Publishing verification successful for v$VERSION"
          
          # Log success metrics (can be collected by monitoring tools)
          echo "::notice title=Publishing Verified::Version $VERSION successfully published to NPM and Docker Hub"

      - name: üí¨ Post Verification Comment
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.version }}';
            const npmStatus = '${{ steps.npm-check.outputs.status }}';
            const dockerStatus = '${{ steps.docker-check.outputs.status }}';
            const overallStatus = '${{ steps.report.outputs.overall_status }}';
            
            // Find the release
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: `v${version}`
              });
              
              if (release.data) {
                const statusEmoji = overallStatus === 'success' ? '‚úÖ' : '‚ö†Ô∏è';
                const comment = `${statusEmoji} **Publishing Verification Results**\n\n` +
                  `- NPM: ${npmStatus === 'success' ? '‚úÖ Published' : '‚ùå Failed'}\n` +
                  `- Docker Hub: ${dockerStatus === 'success' ? '‚úÖ Published' : '‚ùå Failed'}\n\n` +
                  `[View verification details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
                
                // Update release with verification status
                await github.rest.repos.updateRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id,
                  body: release.data.body + '\n\n---\n\n' + comment
                });
              }
            } catch (error) {
              console.log('Could not update release:', error.message);
            }

  # Retry failed publishing
  retry-publishing:
    name: üîÑ Retry Failed Publishing
    runs-on: ubuntu-latest
    needs: verify-publishing
    if: needs.verify-publishing.outputs.docker-status == 'failure' && github.event_name == 'workflow_run'
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîÑ Trigger Manual Publishing
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.verify-publishing.outputs.version }}"
          echo "Attempting to retry publishing for version $VERSION"
          
          # Trigger Docker publishing if it failed
          if [ "${{ needs.verify-publishing.outputs.docker-status }}" == "failure" ]; then
            echo "Triggering Docker publishing workflow..."
            gh workflow run docker-publish.yml -f tag=v$VERSION -f push=true
            echo "Docker publishing workflow triggered successfully"
          else
            echo "Docker publishing was successful, no retry needed"
          fi
          
          echo "::notice title=Manual Retry::Automated retry triggered for failed publishing targets"