---
name: 🐳 Docker Publish Fallback

"on":
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 2.1.0)'
        required: true
        type: string
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'
      force:
        description: 'Force rebuild even if tag exists'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: docker.io
  IMAGE_NAME: docdyhr/mcp-wordpress

jobs:
  fallback-docker-publish:
    name: 🔄 Fallback Docker Publishing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔍 Check if Version Already Exists
        id: check-exists
        continue-on-error: true
        run: |
          VERSION="${{ inputs.version }}"
          echo "Checking if version $VERSION already exists on Docker Hub..."
          
          # Check Docker Hub API
          RESPONSE=$(curl -s https://hub.docker.com/v2/repositories/docdyhr/mcp-wordpress/tags)
          
          if echo "$RESPONSE" | jq -e ".results[] | select(.name == \"$VERSION\" or .name == \"v$VERSION\")" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Version $VERSION already exists on Docker Hub"
            if [ "${{ inputs.force }}" != "true" ]; then
              echo "Use 'force=true' to rebuild existing version"
              exit 1
            else
              echo "🔄 Force rebuild enabled - will overwrite existing version"
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Version $VERSION does not exist - proceeding with build"
          fi

      - name: 📝 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.version }}
            type=raw,value=v${{ inputs.version }}
            type=raw,value=latest,enable=false
          labels: |
            org.opencontainers.image.title=MCP WordPress Server
            org.opencontainers.image.description=Complete WordPress MCP Server with 59 management tools, intelligent caching, and real-time monitoring
            org.opencontainers.image.version=${{ inputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.source=https://github.com/docdyhr/mcp-wordpress
            org.opencontainers.image.url=https://github.com/docdyhr/mcp-wordpress
            org.opencontainers.image.documentation=https://github.com/docdyhr/mcp-wordpress#readme
            org.opencontainers.image.licenses=MIT

      - name: 🏗️ Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ inputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ inputs.version }}
            BUILD_DATE={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            VCS_REF=${{ github.sha }}
          # Security features
          provenance: true
          sbom: true

      - name: 🔍 Verify Published Image
        run: |
          VERSION="${{ inputs.version }}"
          echo "Verifying published Docker image..."
          
          # Wait for Docker Hub to process
          echo "Waiting 60 seconds for Docker Hub to process..."
          sleep 60
          
          # Try to pull the image we just pushed
          for tag in "$VERSION" "v$VERSION"; do
            echo "Testing pull for tag: $tag"
            if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$tag; then
              echo "✅ Successfully verified image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$tag"
            else
              echo "⚠️ Could not pull image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$tag"
            fi
          done

      - name: 📊 Build Summary
        run: |
          echo "## 🐳 Fallback Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ inputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "**Force Rebuild:** ${{ inputs.force }}" >> $GITHUB_STEP_SUMMARY
          echo "**Already Existed:** ${{ steps.check-exists.outputs.exists }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Docker Hub Tags](https://hub.docker.com/r/${{ env.IMAGE_NAME }}/tags)" >> $GITHUB_STEP_SUMMARY
          echo "- [Pull Command](https://hub.docker.com/r/${{ env.IMAGE_NAME }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
