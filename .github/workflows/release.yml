name: 🚀 Release & Publish

on:
  push:
    branches: [main]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  HUSKY: 0
  CI: true

jobs:
  # 🏷️ Semantic Release
  semantic-release:
    name: 🏷️ Semantic Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      new-release-published: ${{ steps.semantic.outputs.new-release-published }}
      new-release-version: ${{ steps.semantic.outputs.new-release-version }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci
        env:
          HUSKY: 0

      - name: 🏗️ Build Project
        run: npm run build
        env:
          HUSKY: 0

      - name: 🧪 Run Essential Tests
        run: |
          # Run core tests that must pass for release
          npm run test:ci
        env:
          WORDPRESS_SITE_URL: https://example.com
          WORDPRESS_USERNAME: test_user
          WORDPRESS_APP_PASSWORD: test_password
          CI: true
          HUSKY: 0

      - name: 🏷️ Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 24
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0
          NODE_OPTIONS: "--max-old-space-size=4096"

  # 📦 NPM Publish
  npm-publish:
    name: 📦 Fallback NPM Publish
    runs-on: ubuntu-latest
    needs: semantic-release
    if: failure() && github.event_name == 'release'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Install Dependencies
        run: npm ci
        env:
          HUSKY: 0

      - name: 🏗️ Build Project
        run: npm run build
        env:
          HUSKY: 0

      - name: 🧪 Verify Build
        run: |
          npm run typecheck
          npm run lint
          npm pack --dry-run
        env:
          HUSKY: 0

      - name: 🔍 Check Ignore Files
        run: npm run check:ignore

      - name: 📦 Publish to NPM
        run: npm publish --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          HUSKY: 0

  # 🐳 Docker Publish
  docker-publish:
    name: 🐳 Publish to Docker Hub
    runs-on: ubuntu-latest
    needs: semantic-release
    if: needs.semantic-release.outputs.new-release-published == 'true' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: 🔍 Verify Docker Login
        run: |
          echo "Verifying Docker Hub login..."
          docker info
          echo "Docker Hub login successful"
          
      - name: 🔍 Debug Release Info
        run: |
          echo "Release info debug:"
          echo "New release published: ${{ needs.semantic-release.outputs.new-release-published }}"
          echo "New release version: ${{ needs.semantic-release.outputs.new-release-version }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub ref name: ${{ github.ref_name }}"
          echo "Event name: ${{ github.event_name }}"
          
      - name: 📝 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/docdyhr/mcp-wordpress
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=MCP WordPress Server
            org.opencontainers.image.description=Complete WordPress MCP Server with 59 management tools, intelligent caching, and real-time monitoring
            org.opencontainers.image.version=${{ needs.semantic-release.outputs.new-release-version || github.ref_name }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            org.opencontainers.image.source=https://github.com/docdyhr/mcp-wordpress
            org.opencontainers.image.url=https://github.com/docdyhr/mcp-wordpress
            org.opencontainers.image.documentation=https://github.com/docdyhr/mcp-wordpress#readme
            org.opencontainers.image.licenses=MIT

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.semantic-release.outputs.new-release-version || github.ref_name }}
            BUILD_DATE={{date 'YYYY-MM-DDTHH:mm:ssZ'}}
            VCS_REF=${{ github.sha }}
          # v6 features
          provenance: true
          sbom: true

      - name: 📝 Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v3
        if: github.event_name == 'release' || needs.semantic-release.outputs.new-release-published == 'true' || github.ref == 'refs/heads/main'
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: docdyhr/mcp-wordpress
          readme-filepath: ./README.md
          
      - name: 🎯 Verify Docker Push Success
        run: |
          echo "Docker build and push completed successfully"
          echo "Published tags: ${{ steps.meta.outputs.tags }}"
          echo "Version: ${{ needs.semantic-release.outputs.new-release-version || github.ref_name }}"

  # 🎉 Post-Release Actions
  post-release:
    name: 🎉 Post-Release Actions
    runs-on: ubuntu-latest
    needs: [semantic-release, npm-publish, docker-publish]
    if: always() && (needs.semantic-release.outputs.new-release-published == 'true' || github.event_name == 'release')
    steps:
      - name: 📊 Release Summary
        run: |
          echo "🎉 Release Pipeline Summary"
          echo "=========================="
          echo "🏷️ Version: ${{ needs.semantic-release.outputs.new-release-version || github.ref_name }}"
          echo "📦 NPM Status: ${{ needs.npm-publish.result }}"
          echo "🐳 Docker Status: ${{ needs.docker-publish.result }}"
          echo "🔄 Semantic Release: ${{ needs.semantic-release.result }}"
          echo "=========================="
          
      - name: ✅ Success Notification
        if: needs.semantic-release.result == 'success' && needs.docker-publish.result == 'success'
        run: |
          echo "🎉 Release completed successfully!"
          echo "✅ All components published successfully"
          
      - name: 🚨 Failure Notification
        if: needs.semantic-release.result == 'failure' || needs.docker-publish.result == 'failure'
        run: |
          echo "❌ Release had failures!"
          echo "Please check the workflow logs and fix any issues."
          echo "Semantic Release: ${{ needs.semantic-release.result }}"
          echo "Docker Publish: ${{ needs.docker-publish.result }}"
          exit 1