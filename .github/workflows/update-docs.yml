name: 📚 Update API Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'src/tools/**'
      - 'src/types/**'
      - 'src/server/ToolRegistry.ts'
      - 'package.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/tools/**'
      - 'src/types/**'
      - 'src/server/ToolRegistry.ts'
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔨 Build Project
      run: npm run build

    - name: 📊 Generate Documentation
      run: npm run docs:generate

    - name: 🧪 Validate Documentation
      run: |
        # Check that documentation was generated
        if [ ! -f "docs/api/README.md" ]; then
          echo "❌ Main documentation file not found"
          exit 1
        fi
        
        # Check that summary exists and has expected structure
        if [ ! -f "docs/api/summary.json" ]; then
          echo "❌ Documentation summary not found"
          exit 1
        fi
        
        # Validate JSON structure
        node -e "
          const summary = require('./docs/api/summary.json');
          if (!summary.totalTools || summary.totalTools < 50) {
            throw new Error('Invalid tool count in summary');
          }
          if (!summary.coverage || summary.coverage.toolsWithExamples !== summary.totalTools) {
            throw new Error('Documentation coverage incomplete');
          }
          console.log('✅ Documentation validation passed');
          console.log(\`📊 Generated docs for \${summary.totalTools} tools\`);
        "

    - name: 📈 Documentation Stats
      run: |
        echo "📊 Documentation Generation Summary:"
        echo "=================================="
        
        # Count generated files
        TOOL_COUNT=$(find docs/api/tools -name "*.md" | wc -l)
        CATEGORY_COUNT=$(find docs/api/categories -name "*.md" | wc -l)
        
        echo "🔧 Tool documentation files: $TOOL_COUNT"
        echo "📂 Category documentation files: $CATEGORY_COUNT"
        echo "📄 Total documentation files: $(find docs/api -name "*.md" | wc -l)"
        echo "📊 OpenAPI spec: $([ -f docs/api/openapi.json ] && echo "✅ Generated" || echo "❌ Missing")"
        
        # Show summary from generated JSON
        echo ""
        echo "📋 Generation Summary:"
        cat docs/api/summary.json | jq -r '
          "Last Updated: " + .lastUpdated +
          "\nTotal Tools: " + (.totalTools | tostring) +
          "\nTotal Categories: " + (.totalCategories | tostring) + 
          "\nCoverage: " + (.coverage.toolsWithExamples | tostring) + "/" + (.totalTools | tostring) + " tools with examples"
        '

    - name: 🔍 Check for Documentation Changes
      id: changes
      run: |
        git add docs/api/
        if git diff --cached --quiet; then
          echo "No documentation changes detected"
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "Documentation changes detected"
          echo "changed=true" >> $GITHUB_OUTPUT
          
          # Show what changed
          echo "📝 Changed files:"
          git diff --cached --name-only | sed 's/^/  - /'
        fi

    - name: 📝 Commit Documentation Updates
      if: steps.changes.outputs.changed == 'true' && github.event_name == 'push'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Get the summary for commit message
        TOOL_COUNT=$(cat docs/api/summary.json | jq -r '.totalTools')
        TIMESTAMP=$(cat docs/api/summary.json | jq -r '.lastUpdated')
        
        git add docs/api/
        git commit -m "docs: auto-update API documentation

📚 Automated documentation update
🔧 Tools documented: $TOOL_COUNT
📅 Generated: $TIMESTAMP
🤖 Updated by GitHub Actions

[skip ci]"

    - name: 🚀 Push Documentation Changes
      if: steps.changes.outputs.changed == 'true' && github.event_name == 'push'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main

    - name: 📋 Pull Request Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (!fs.existsSync('docs/api/summary.json')) {
            return;
          }
          
          const summary = JSON.parse(fs.readFileSync('docs/api/summary.json', 'utf8'));
          
          const body = `## 📚 Documentation Preview
          
          This PR will update the API documentation:
          
          📊 **Documentation Stats:**
          - 🔧 **Tools**: ${summary.totalTools}
          - 📂 **Categories**: ${summary.totalCategories}
          - 📝 **Coverage**: ${summary.coverage.toolsWithExamples}/${summary.totalTools} tools with examples
          - 🔗 **WordPress mappings**: ${summary.coverage.toolsWithWordPressMapping}
          
          📄 **Generated Files:**
          - Main API documentation
          - ${summary.totalTools} individual tool docs
          - ${summary.totalCategories} category guides
          - OpenAPI specification
          - Documentation summary
          
          🎯 **Review the generated documentation** to ensure it accurately reflects the code changes.
          
          > 📝 Documentation will be automatically updated when this PR is merged.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  validate-openapi:
    runs-on: ubuntu-latest
    needs: update-documentation
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📦 Install Dependencies
      run: npm ci

    - name: 🔨 Build and Generate Docs
      run: |
        npm run build
        npm run docs:generate

    - name: ✅ Validate OpenAPI Specification
      run: |
        # Install OpenAPI validator
        npm install -g @apidevtools/swagger-parser
        
        # Validate the generated OpenAPI spec
        if [ -f "docs/api/openapi.json" ]; then
          echo "🔍 Validating OpenAPI specification..."
          swagger-parser validate docs/api/openapi.json
          echo "✅ OpenAPI specification is valid"
        else
          echo "⚠️ OpenAPI specification not found"
        fi

    - name: 📊 OpenAPI Stats
      run: |
        if [ -f "docs/api/openapi.json" ]; then
          echo "📈 OpenAPI Specification Stats:"
          echo "=============================="
          
          PATHS=$(cat docs/api/openapi.json | jq '.paths | keys | length')
          SCHEMAS=$(cat docs/api/openapi.json | jq '.components.schemas | keys | length')
          
          echo "🛣️  API Paths: $PATHS"
          echo "📋 Schema Definitions: $SCHEMAS"
          echo "📝 Specification Version: $(cat docs/api/openapi.json | jq -r '.openapi')"
          echo "ℹ️  API Version: $(cat docs/api/openapi.json | jq -r '.info.version')"
        fi