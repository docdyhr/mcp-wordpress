name: 🔐 Advanced Secret Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run secret scanning daily at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  secret-scanning:
    name: 🔍 Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          # Fetch full history for comprehensive scanning
          fetch-depth: 0

      - name: 🔍 TruffleHog Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          # Scan the entire repository
          path: ./
          # Base branch for comparison (only scan diff in PRs)
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || '' }}
          # Head branch for comparison
          head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || '' }}
          # Additional configuration - only verified secrets
          extra_args: --only-verified

      - name: 🔍 GitLeaks Secret Detection
        uses: gitleaks/gitleaks-action@v2.3.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Organizations
          GITLEAKS_CONFIG: .gitleaks.toml

  credential-scanning:
    name: 🔑 Credential Pattern Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Custom Secret Pattern Detection
        run: |
          echo "## 🔐 Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Define patterns for common secrets
          declare -A patterns=(
            ["API Keys"]="(?i)(api[_-]?key|apikey|key)[\s]*[=:]{1}[\s]*['\"]?[a-zA-Z0-9_-]{20,}"
            ["Passwords"]="(?i)(password|passwd|pwd)[\s]*[=:]{1}[\s]*['\"]?[a-zA-Z0-9!@#$%^&*()_+-=]{8,}"
            ["Database URLs"]="(?i)(mongodb|mysql|postgres|redis)://[^\s]+"
            ["Private Keys"]="-----BEGIN [A-Z ]+PRIVATE KEY-----"
            ["AWS Keys"]="AKIA[0-9A-Z]{16}"
            ["JWT Tokens"]="eyJ[a-zA-Z0-9_-]+\\.eyJ[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+"
            ["GitHub Tokens"]="ghp_[a-zA-Z0-9]{36}|gho_[a-zA-Z0-9]{36}|ghu_[a-zA-Z0-9]{36}|ghs_[a-zA-Z0-9]{36}|ghr_[a-zA-Z0-9]{36}"
          )
          
          # Scan for patterns
          total_findings=0
          for pattern_name in "${!patterns[@]}"; do
            pattern="${patterns[$pattern_name]}"
            findings=$(grep -r -P "$pattern" . \
              --exclude-dir=node_modules \
              --exclude-dir=.git \
              --exclude-dir=dist \
              --exclude-dir=coverage \
              --exclude-dir=tests \
              --exclude-dir=docs \
              --exclude-dir=".github" \
              --exclude="*.log" \
              --exclude="*.min.js" \
              --exclude="*.test.js" \
              --exclude="*.spec.js" \
              --exclude="*.md" \
              --exclude="package-lock.json" \
              2>/dev/null | wc -l)
            
            if [ "$findings" -gt 0 ]; then
              echo "⚠️ **$pattern_name**: $findings potential matches found" >> $GITHUB_STEP_SUMMARY
              total_findings=$((total_findings + findings))
            fi
          done
          
          if [ "$total_findings" -eq 0 ]; then
            echo "✅ **No secret patterns detected**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Total potential secrets found: $total_findings**" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ **Action Required:** Please review and remove any actual secrets." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🔍 Environment File Check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📄 Environment File Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Check for various env files
          env_files=(".env" ".env.local" ".env.development" ".env.production" ".env.test" "config.json" "secrets.json")
          env_found=false
          
          for file in "${env_files[@]}"; do
            if [ -f "$file" ]; then
              echo "⚠️ **Found environment file:** $file" >> $GITHUB_STEP_SUMMARY
              env_found=true
              
              # Check if file is in .gitignore
              if grep -q "$file" .gitignore 2>/dev/null; then
                echo "  ✅ File is properly ignored in .gitignore" >> $GITHUB_STEP_SUMMARY
              else
                echo "  ❌ **WARNING:** File is NOT in .gitignore" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          if [ "$env_found" = false ]; then
            echo "✅ **No environment files found in repository root**" >> $GITHUB_STEP_SUMMARY
          fi

  security-headers-check:
    name: 🛡️ Security Headers Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Security Configuration Check
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security Configuration Analysis" >> $GITHUB_STEP_SUMMARY
          
          # Check for security-related configuration files
          security_configs=("security.txt" ".security.md" "SECURITY.md" ".well-known/security.txt")
          
          for config in "${security_configs[@]}"; do
            if [ -f "$config" ]; then
              echo "✅ **Security policy found:** $config" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          # Check for common security misconfigurations
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Configuration Security Check" >> $GITHUB_STEP_SUMMARY
          
          # Check package.json for security settings
          if [ -f "package.json" ]; then
            if grep -q '"private":\s*true' package.json; then
              echo "✅ **Package marked as private**" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Package not marked as private** - consider adding '\"private\": true'" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Check for audit configuration
          if [ -f ".audit-ci.json" ]; then
            echo "✅ **Audit CI configuration found**" >> $GITHUB_STEP_SUMMARY
          fi

  secret-scanning-summary:
    name: 📊 Secret Scanning Summary
    runs-on: ubuntu-latest
    needs: [secret-scanning, credential-scanning, security-headers-check]
    if: always()
    steps:
      - name: 📊 Generate Security Summary
        run: |
          echo "## 📊 Secret Scanning Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **TruffleHog/GitLeaks Scanning:** ${{ needs.secret-scanning.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pattern Analysis:** ${{ needs.credential-scanning.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Configuration:** ${{ needs.security-headers-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "1. **Never commit secrets** to the repository" >> $GITHUB_STEP_SUMMARY
          echo "2. **Use environment variables** for sensitive configuration" >> $GITHUB_STEP_SUMMARY
          echo "3. **Enable GitHub secret scanning** in repository settings" >> $GITHUB_STEP_SUMMARY
          echo "4. **Use GitHub secrets** for CI/CD credentials" >> $GITHUB_STEP_SUMMARY
          echo "5. **Regularly rotate** API keys and tokens" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Resources" >> $GITHUB_STEP_SUMMARY
          echo "- [GitHub Secret Scanning](https://docs.github.com/en/code-security/secret-scanning)" >> $GITHUB_STEP_SUMMARY
          echo "- [Managing Secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets)" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Best Practices](https://docs.github.com/en/code-security/getting-started/github-security-features)" >> $GITHUB_STEP_SUMMARY