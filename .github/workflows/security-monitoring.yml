name: '🛡️ Security Monitoring'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    # Skip for dependency-only PRs
    paths-ignore:
      - 'package-lock.json'
      - 'npm-shrinkwrap.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - 'security-fixes.txt'
      - 'update-report-*.md'
      - 'updates-*.json'
  schedule:
    # Run daily security checks at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # 🔍 Secret Scanning Check
  secret-scan:
    name: 🔍 Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better scanning

      - name: 🔍 TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@v3.82.11
        with:
          path: ./
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || '' }}
          head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || '' }}
          extra_args: --debug --only-verified

      - name: 🔍 Gitleaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # optional

      - name: 📊 Secret Scanning Report
        if: always()
        run: |
          echo "## 🔍 Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scanning Tools Used:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TruffleHog (verified secrets only)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Gitleaks (comprehensive scanning)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Secret Scanning (if enabled in settings)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 Enable GitHub Secret Scanning:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to Settings → Security → Code security and analysis" >> $GITHUB_STEP_SUMMARY
          echo "2. Enable 'Secret scanning'" >> $GITHUB_STEP_SUMMARY
          echo "3. Enable 'Push protection' to prevent secrets from being pushed" >> $GITHUB_STEP_SUMMARY

  # 🛡️ SAST Security Analysis
  sast-scan:
    name: 🛡️ SAST Analysis
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run Semgrep
        run: |
          pip install semgrep
          semgrep --config=auto --json --output=semgrep-results.json src/ || true
          echo "## 🛡️ SAST Analysis Results" >> $GITHUB_STEP_SUMMARY
          if [ -f semgrep-results.json ]; then
            FINDINGS=$(cat semgrep-results.json | jq '.results | length // 0')
            echo "- **Findings**: $FINDINGS" >> $GITHUB_STEP_SUMMARY
            if [ "$FINDINGS" -gt 0 ]; then
              echo "⚠️ **SAST findings detected** - please review" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ **No SAST issues found**" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ **SAST analysis completed**" >> $GITHUB_STEP_SUMMARY
          fi
        continue-on-error: true

      - name: 🔍 Run ESLint Security Plugin
        run: |
          npm install --save-dev eslint-plugin-security
          echo '{"extends": ["plugin:security/recommended"]}' > .eslintrc.security.json
          npx eslint --config .eslintrc.security.json --ext .js,.ts,.jsx,.tsx src/ || true

  # 📦 Supply Chain Security
  supply-chain:
    name: 📦 Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔍 Check npm audit
        run: |
          npm audit --production
          npm audit --json > npm-audit.json || true
          
      - name: 🔍 Check for known vulnerabilities with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: 🔍 OSSF Scorecard analysis
        uses: ossf/scorecard-action@v2.4.0
        with:
          results_file: scorecard.sarif
          results_format: sarif
          publish_results: true

      - name: 📤 Upload OSSF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: scorecard.sarif
          category: ossf-scorecard

  # 🔐 License Compliance
  license-check:
    name: 🔐 License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Check licenses
        run: |
          npx license-checker --production --summary --out license-report.json
          npx license-checker --production --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;Unlicense"

  # 📊 Security Dashboard
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [secret-scan, sast-scan, supply-chain, license-check]
    if: always()
    steps:
      - name: 📊 Generate Security Dashboard
        run: |
          echo "# 🛡️ Security Monitoring Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Secret Scanning | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🛡️ SAST Analysis | ${{ needs.sast-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Supply Chain | ${{ needs.supply-chain.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔐 License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Security Tools Active" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL (via separate workflow)" >> $GITHUB_STEP_SUMMARY
          echo "- Dependabot (automated updates)" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Review (PR checks)" >> $GITHUB_STEP_SUMMARY
          echo "- TruffleHog & Gitleaks (secret scanning)" >> $GITHUB_STEP_SUMMARY
          echo "- Semgrep (SAST analysis)" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy (container scanning)" >> $GITHUB_STEP_SUMMARY
          echo "- OSSF Scorecard (supply chain)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 Next scan: $(date -u -d '+1 day' +'%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
