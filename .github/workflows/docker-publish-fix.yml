name: 🐳 Docker Publishing Fix (DEPRECATED - Use docker-modern.yml)

# DEPRECATED: This workflow has been replaced by docker-modern.yml
# Kept for reference only - will be removed in future release
# Updated 2025-10-02: Consolidated into docker-modern.yml

on:
  # Disabled - use docker-modern.yml instead
  workflow_dispatch:
    inputs:
      version:
        description: "Version to republish (e.g., 2.9.2, 2.9.3)"
        required: true
        type: string
      force_rebuild:
        description: "Force rebuild even if image exists"
        required: false
        type: boolean
        default: false
      platforms:
        description: "Target platforms"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"

env:
  REGISTRY: docker.io
  IMAGE_NAME: docdyhr/mcp-wordpress

jobs:
  validate-inputs:
    name: 🔍 Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      tag: ${{ steps.validate.outputs.tag }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Validate Version Input
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"

          # Remove 'v' prefix if present
          VERSION=${VERSION#v}

          # Validate version format (semantic versioning)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi

          echo "✅ Valid version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

          # Check if git tag exists
          if git tag | grep -q "^v$VERSION$"; then
            echo "✅ Git tag v$VERSION exists"
          else
            echo "⚠️ Git tag v$VERSION does not exist, but proceeding..."
          fi

  check-existing-image:
    name: 🔍 Check Existing Docker Image
    runs-on: ubuntu-latest
    needs: validate-inputs
    outputs:
      image_exists: ${{ steps.check.outputs.image_exists }}
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔍 Check if Image Exists
        id: check
        run: |
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
          FORCE_REBUILD="${{ github.event.inputs.force_rebuild }}"

          echo "Checking for existing image: $IMAGE"

          # Try to inspect the image
          if docker manifest inspect $IMAGE > /dev/null 2>&1; then
            echo "✅ Image already exists: $IMAGE"
            echo "image_exists=true" >> $GITHUB_OUTPUT

            if [[ "$FORCE_REBUILD" == "true" ]]; then
              echo "🔄 Force rebuild requested, will rebuild anyway"
              echo "should_build=true" >> $GITHUB_OUTPUT
            else
              echo "⏭️ Image exists and no force rebuild, skipping build"
              echo "should_build=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ Image does not exist: $IMAGE"
            echo "image_exists=false" >> $GITHUB_OUTPUT
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate-inputs, check-existing-image]
    if: needs.check-existing-image.outputs.should_build == 'true'
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate-inputs.outputs.tag }}

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          install: true

      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🔍 Verify Docker Credentials
        run: |
          echo "Verifying Docker Hub access..."
          docker info
          whoami=$(docker run --rm alpine whoami)
          echo "✅ Docker environment verified"

      - name: 📝 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.validate-inputs.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=MCP WordPress Server
            org.opencontainers.image.description=Model Context Protocol server for WordPress
            org.opencontainers.image.version=${{ needs.validate-inputs.outputs.version }}
            org.opencontainers.image.vendor=docdyhr
            org.opencontainers.image.licenses=MIT

      - name: 🏗️ Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ github.event.inputs.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            VERSION=${{ needs.validate-inputs.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

      - name: 📝 Display Build Results
        run: |
          echo "✅ Docker build completed successfully"
          echo "📦 Image Digest: ${{ steps.build.outputs.digest }}"
          echo "🏷️ Tags:"
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            echo "  - $tag"
          done

  verify-publication:
    name: 🔍 Verify Publication
    runs-on: ubuntu-latest
    needs: [validate-inputs, check-existing-image, build-and-push]
    if:
      always() && (needs.check-existing-image.outputs.image_exists == 'true' || needs.build-and-push.result ==
      'success')
    steps:
      - name: 🔐 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ⏳ Wait for Docker Hub Propagation
        run: |
          echo "Waiting for Docker Hub propagation..."
          sleep 45

      - name: 🔍 Verify Image Availability
        id: verify
        run: |
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"

          echo "🔍 Verifying image: $IMAGE"

          # Multiple verification attempts
          MAX_ATTEMPTS=5
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS..."

            # Try to pull the image
            if docker pull $IMAGE; then
              echo "✅ Successfully pulled image: $IMAGE"

              # Verify image can run (test with basic health check)
              if timeout 10 docker run --rm $IMAGE node -e "console.log('MCP WordPress Server - Health Check OK'); process.exit(0)"; then
                echo "✅ Image runs successfully"
                echo "verification_status=success" >> $GITHUB_OUTPUT
                break
              else
                echo "⚠️ Image pulled but failed to run"
              fi
            else
              echo "❌ Failed to pull image: $IMAGE"
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ All verification attempts failed"
              echo "verification_status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi

            echo "Waiting 30 seconds before retry..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: 📋 Generate Verification Report
        run: |
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"

          echo "## 🐳 Docker Publishing Verification Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** $IMAGE" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Successfully Verified" >> $GITHUB_STEP_SUMMARY
          echo "**Verification Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get image info
          echo "### Image Information" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          docker image inspect $IMAGE --format 'ID: {{.Id}}' >> $GITHUB_STEP_SUMMARY
          docker image inspect $IMAGE --format 'Created: {{.Created}}' >> $GITHUB_STEP_SUMMARY
          docker image inspect $IMAGE --format 'Size: {{.Size}} bytes' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  update-dockerhub-description:
    name: 📝 Update Docker Hub Description
    runs-on: ubuntu-latest
    needs: [verify-publication]
    if: needs.verify-publication.result == 'success'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📝 Update Docker Hub Description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md

  summary:
    name: 📊 Summary
    runs-on: ubuntu-latest
    needs: [validate-inputs, check-existing-image, build-and-push, verify-publication]
    if: always()
    steps:
      - name: 📊 Generate Summary
        run: |
          VERSION="${{ needs.validate-inputs.outputs.version }}"
          IMAGE_EXISTS="${{ needs.check-existing-image.outputs.image_exists }}"
          BUILD_STATUS="${{ needs.build-and-push.result }}"
          VERIFY_STATUS="${{ needs.verify-publication.result }}"

          echo "## 🐳 Docker Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Image Pre-existed:** $IMAGE_EXISTS" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** $BUILD_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "**Verification Status:** $VERIFY_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "$VERIFY_STATUS" == "success" ]]; then
            echo "✅ **Result:** Docker image successfully published and verified" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "- Image is now available on Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo "- Consider closing related publishing failure issues" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Result:** Docker publishing failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Troubleshooting" >> $GITHUB_STEP_SUMMARY
            echo "- Check Docker Hub credentials in repository secrets" >> $GITHUB_STEP_SUMMARY
            echo "- Verify network connectivity to Docker Hub" >> $GITHUB_STEP_SUMMARY
            echo "- Check for any Docker Hub service issues" >> $GITHUB_STEP_SUMMARY
          fi
