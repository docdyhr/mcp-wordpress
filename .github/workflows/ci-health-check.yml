name: 🩺 CI/CD Health Check

on:
  schedule:
    # Run weekly on Sunday at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch:

jobs:
  health-check:
    name: 🩺 CI/CD Pipeline Health
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔍 Check Action Versions
        run: |
          echo "🔍 Checking GitHub Action versions..."
          
          # Find all workflow files
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
            echo "📄 Checking $file"
            
            # Check for outdated actions
            if grep -q "actions/checkout@v3" "$file"; then
              echo "⚠️ Found outdated actions/checkout@v3 in $file"
            fi
            
            if grep -q "actions/setup-node@v3" "$file"; then
              echo "⚠️ Found outdated actions/setup-node@v3 in $file"
            fi
            
            if grep -q "actions/upload-artifact@v3" "$file"; then
              echo "⚠️ Found outdated actions/upload-artifact@v3 in $file"
            fi
            
            if grep -q "actions/cache@v3" "$file"; then
              echo "⚠️ Found outdated actions/cache@v3 in $file"
            fi
          done

      - name: 🔍 Check Node.js Version Consistency
        run: |
          echo "🔍 Checking Node.js version consistency..."
          
          # Get engine requirement from package.json
          ENGINE_VERSION=$(node -p "require('./package.json').engines.node")
          echo "📦 Package.json engines requirement: $ENGINE_VERSION"
          
          # Check workflows
          WORKFLOW_VERSIONS=$(grep -r "node-version" .github/workflows/ || true)
          echo "🔧 Workflow versions found:"
          echo "$WORKFLOW_VERSIONS"

      - name: 🔍 Check Secret Dependencies
        run: |
          echo "🔍 Checking secret dependencies..."
          
          # Find all secret references
          SECRET_REFS=$(grep -r "secrets\." .github/workflows/ | grep -v "GITHUB_TOKEN" || true)
          
          if [ -n "$SECRET_REFS" ]; then
            echo "🔐 External secrets found (ensure these are configured):"
            echo "$SECRET_REFS"
          else
            echo "✅ No external secrets dependencies found"
          fi

      - name: 🔍 Check for Missing Error Handling
        run: |
          echo "🔍 Checking for missing error handling..."
          
          # Check for steps without continue-on-error or if conditions
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read -r file; do
            echo "📄 Analyzing $file"
            
            # Look for potentially fragile steps
            if grep -q "npm publish" "$file" && ! grep -A5 -B5 "npm publish" "$file" | grep -q "continue-on-error\|if:"; then
              echo "⚠️ npm publish without error handling in $file"
            fi
            
            if grep -q "docker push" "$file" && ! grep -A5 -B5 "docker push" "$file" | grep -q "continue-on-error\|if:"; then
              echo "⚠️ docker push without error handling in $file"
            fi
          done

      - name: 📊 Generate Health Report
        run: |
          echo "# 🩺 CI/CD Pipeline Health Report" > ci-health-report.md
          echo "" >> ci-health-report.md
          echo "Generated on: $(date)" >> ci-health-report.md
          echo "" >> ci-health-report.md
          
          echo "## ✅ Health Checks Completed" >> ci-health-report.md
          echo "- Action version consistency" >> ci-health-report.md
          echo "- Node.js version alignment" >> ci-health-report.md
          echo "- Secret dependency review" >> ci-health-report.md
          echo "- Error handling coverage" >> ci-health-report.md
          echo "" >> ci-health-report.md
          
          echo "## 🔧 Recommendations" >> ci-health-report.md
          echo "1. Keep GitHub Actions updated to latest versions" >> ci-health-report.md
          echo "2. Ensure Node.js versions match package.json engines" >> ci-health-report.md
          echo "3. Add proper error handling for critical steps" >> ci-health-report.md
          echo "4. Use caching for build performance" >> ci-health-report.md
          echo "5. Set appropriate timeouts for long-running jobs" >> ci-health-report.md

      - name: 📤 Upload Health Report
        uses: actions/upload-artifact@v4
        with:
          name: ci-health-report
          path: ci-health-report.md
