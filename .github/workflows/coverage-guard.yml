name: 📊 Coverage Guard

on:
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'package.json'
      - 'jest.config.*'
      - '.github/workflows/coverage-guard.yml'

concurrency:
  group: coverage-guard-${{ github.ref }}
  cancel-in-progress: true

jobs:
  incremental-coverage:
    name: 🛡️ Incremental Coverage Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for baseline comparison

      - name: 📥 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔄 Switch to main branch and capture baseline
        run: |
          echo "📊 Capturing baseline coverage from main branch..."
          git checkout main
          npm run build
          npm run test:coverage
          node scripts/incremental-coverage-guardrail.js capture-baseline
          
          # Store baseline as artifact for debugging
          cp coverage-baseline.json coverage-baseline-${{ github.sha }}.json

      - name: 🔄 Switch back to PR branch
        env:
          HEAD_REF: ${{ github.head_ref }}
        run: |
          echo "🔄 Switching back to PR branch..."
          git checkout "$HEAD_REF"

      - name: 🧪 Run PR tests with coverage
        run: |
          echo "🧪 Running tests on PR branch..."
          npm run build
          npm run test:coverage

      - name: 🛡️ Check incremental coverage
        id: coverage-check
        run: |
          echo "🛡️ Checking incremental coverage..."
          node scripts/incremental-coverage-guardrail.js check-increment

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ github.sha }}
          path: |
            coverage/
            coverage-baseline*.json
          retention-days: 30

      - name: 💬 Comment on PR with coverage results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            
            // Read baseline and current coverage
            let baselineExists = false;
            let baseline = {};
            let comment = '## 📊 Coverage Report\n\n';
            
            try {
              if (fs.existsSync('coverage-baseline.json')) {
                baseline = JSON.parse(fs.readFileSync('coverage-baseline.json', 'utf8'));
                baselineExists = true;
              }
            } catch (error) {
              console.log('Could not read baseline:', error.message);
            }

            if (baselineExists && baseline.metrics) {
              comment += '### Coverage Comparison\n\n';
              comment += '| Metric | Baseline | Current | Change | Status |\n';
              comment += '|--------|----------|---------|--------|---------|\n';
              
              const metrics = ['lines', 'branches', 'functions', 'statements'];
              let hasRegression = false;
              
              // This is a simplified version - in practice, we'd parse the actual output
              comment += '| Lines | ' + (baseline.metrics.lines || 0).toFixed(2) + '% | TBD | TBD | 🔄 |\n';
              comment += '| Branches | ' + (baseline.metrics.branches || 0).toFixed(2) + '% | TBD | TBD | 🔄 |\n';
              comment += '| Functions | ' + (baseline.metrics.functions || 0).toFixed(2) + '% | TBD | TBD | 🔄 |\n';
              comment += '| Statements | ' + (baseline.metrics.statements || 0).toFixed(2) + '% | TBD | TBD | 🔄 |\n';
              
              comment += '\n### Details\n\n';
              comment += '- **Tolerance**: ±1.0%\n';
              comment += '- **Baseline Branch**: `main`\n';
              comment += '- **Baseline Commit**: `' + (baseline.commit || 'unknown').substring(0, 7) + '`\n';
              comment += '- **Files Analyzed**: ' + (baseline.metrics.totalFiles || 0) + '\n';
            } else {
              comment += '⚠️ Could not load baseline coverage data.\n\n';
              comment += 'This may be the first run or baseline capture failed.\n';
            }
            
            comment += '\n---\n';
            comment += '🤖 *Generated by incremental coverage guard*';

            // Find existing coverage comment and update it, or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(c => 
              c.body.includes('📊 Coverage Report') && c.user.type === 'Bot'
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  update-baseline:
    name: 📈 Update Coverage Baseline
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📥 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run tests with coverage
        run: |
          npm run build
          npm run test:coverage

      - name: 📊 Capture new baseline
        run: |
          node scripts/incremental-coverage-guardrail.js capture-baseline
          
          # Verify baseline was created
          if [ -f "coverage-baseline.json" ]; then
            echo "✅ Baseline captured successfully"
            cat coverage-baseline.json
          else
            echo "❌ Failed to capture baseline"
            exit 1
          fi

      - name: 💾 Commit updated baseline
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if git diff --quiet coverage-baseline.json; then
            echo "📊 No baseline changes detected"
          else
            git add coverage-baseline.json
            git commit -m "chore: update coverage baseline [skip ci]
            
            Updated coverage baseline after main branch changes.
            
            🤖 Generated by GitHub Actions"
            git push
          fi