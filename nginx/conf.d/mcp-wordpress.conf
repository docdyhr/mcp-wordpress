# MCP WordPress Blue-Green Deployment Configuration
# This configuration switches between blue and green environments

# Define upstream servers (will be updated by deployment script)
upstream mcp_wordpress_backend {
    # Default to blue environment (port 3001)
    # This will be dynamically updated by the blue-green deployment script
    server mcp-wordpress-blue:3000 max_fails=3 fail_timeout=30s;
    
    # Backup server configuration (commented out, used during switches)
    # server mcp-wordpress-green:3000 max_fails=3 fail_timeout=30s;
    
    # Health check and load balancing
    keepalive 32;
}

# Health check upstream (checks both environments)
upstream health_check_backend {
    server mcp-wordpress-blue:3000;
    server mcp-wordpress-green:3000 backup;
}

# Main server block
server {
    listen 3000;
    listen [::]:3000;
    server_name mcp-wordpress.local localhost;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';" always;

    # Custom headers for blue-green deployment tracking
    add_header X-Deployment-Environment $upstream_addr always;
    add_header X-Request-ID $request_id always;

    # Main application proxy
    location / {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;

        # Proxy configuration
        proxy_pass http://mcp_wordpress_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
        
        # Cache bypass for authentication
        proxy_no_cache $http_authorization;
        proxy_cache_bypass $http_authorization;
    }

    # Health check endpoint (high frequency, separate rate limit)
    location /health {
        limit_req zone=health burst=100 nodelay;
        
        proxy_pass http://health_check_backend/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Fast health checks
        proxy_connect_timeout 2s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        
        # No caching for health checks
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        
        # Disable access logging for health checks
        access_log off;
    }

    # Metrics endpoint (for monitoring)
    location /metrics {
        proxy_pass http://mcp_wordpress_backend/metrics;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # Restrict access to monitoring systems
        allow 127.0.0.1;
        allow 172.20.0.0/16;  # Docker network
        deny all;
        
        # No caching for metrics
        proxy_no_cache 1;
        proxy_cache_bypass 1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Deployment status endpoint
    location /_deployment/status {
        access_log off;
        return 200 '{"status":"active","environment":"$upstream_addr","timestamp":"$time_iso8601","request_id":"$request_id"}';
        add_header Content-Type application/json;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Blue environment direct access (for testing)
    location /_blue/ {
        internal;
        proxy_pass http://mcp-wordpress-blue:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Environment "blue";
    }

    # Green environment direct access (for testing) 
    location /_green/ {
        internal;
        proxy_pass http://mcp-wordpress-green:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Environment "green";
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# SSL/HTTPS server block (optional, for production)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name mcp-wordpress.local;

    # SSL configuration (certificates should be mounted as volumes)
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozTLS:10m;
    ssl_session_tickets off;

    # Modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # HSTS (31536000 seconds = 1 year)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Same configuration as HTTP server
    include /etc/nginx/conf.d/mcp-wordpress-common.conf;
}